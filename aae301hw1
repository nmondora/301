{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sympy\n",
    "sympy.init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "i = sympy.I\n",
    "pi = sympy.pi\n",
    "exp = sympy.exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$\\displaystyle \\left[ - \\sqrt[8]{13} \\sin{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)} - \\sqrt[8]{13} i \\cos{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)}, \\  \\sqrt[8]{13} \\sin{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)} + \\sqrt[8]{13} i \\cos{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)}, \\  - \\sqrt[8]{13} \\cos{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)} + \\sqrt[8]{13} i \\sin{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)}, \\  \\sqrt[8]{13} \\cos{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)} - \\sqrt[8]{13} i \\sin{\\left(- \\frac{\\operatorname{atan}{\\left(\\frac{3}{2} \\right)}}{4} + \\frac{\\pi}{4} \\right)}\\right]$"
      ],
      "text/plain": [
       "⎡  8 ____    ⎛  atan(3/2)   π⎞   8 ____      ⎛  atan(3/2)   π⎞  8 ____    ⎛  a\n",
       "⎢- ╲╱ 13 ⋅sin⎜- ───────── + ─⎟ - ╲╱ 13 ⋅ⅈ⋅cos⎜- ───────── + ─⎟, ╲╱ 13 ⋅sin⎜- ─\n",
       "⎣            ⎝      4       4⎠               ⎝      4       4⎠            ⎝   \n",
       "\n",
       "tan(3/2)   π⎞   8 ____      ⎛  atan(3/2)   π⎞    8 ____    ⎛  atan(3/2)   π⎞  \n",
       "──────── + ─⎟ + ╲╱ 13 ⋅ⅈ⋅cos⎜- ───────── + ─⎟, - ╲╱ 13 ⋅cos⎜- ───────── + ─⎟ +\n",
       "   4       4⎠               ⎝      4       4⎠              ⎝      4       4⎠  \n",
       "\n",
       " 8 ____      ⎛  atan(3/2)   π⎞  8 ____    ⎛  atan(3/2)   π⎞   8 ____      ⎛  a\n",
       " ╲╱ 13 ⋅ⅈ⋅sin⎜- ───────── + ─⎟, ╲╱ 13 ⋅cos⎜- ───────── + ─⎟ - ╲╱ 13 ⋅ⅈ⋅sin⎜- ─\n",
       "             ⎝      4       4⎠            ⎝      4       4⎠               ⎝   \n",
       "\n",
       "tan(3/2)   π⎞⎤\n",
       "──────── + ─⎟⎥\n",
       "   4       4⎠⎦"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = sympy.symbols('z', complex=True)\n",
    "sympy.solve(z**4 + 2 + 3*i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEEAAAAaCAYAAADovjFxAAAABHNCSVQICAgIfAhkiAAAArNJREFUWIXt2F+oTlkYx/HPGaahIxQXyqTTEJGcM4c0c6M0/tyqcaMMxQVKilxQLk6T0NQ0TdNEriQXQxTlXpGaxt8oZMi/kD8RGSNmHBdr7bHOtl/7Ne92XqfjW6v1rudZ79rP/q39rLX2bunq6tLf+aTZATSJX7E3awxsYiDNZANeZI3+KsLDtFErHXbiLlrfezjVsAbdWICp8ffSGn0/j/4JmaFIhGlYiC34K7HPxy84gsdxoF2NxV4Z02J9Ipb92IghBX078BR/ZoYiETYJN7k1Z9+AlXGQmw2FXD3rMNHrG9uMUVhV0LcdZ/AyM+RFGI9Z2IO/c77V0T8UKxqNumKu44LwdMIfsb0MA3J9O3A6NeRFWIIW7C640CFB6e4CXzOZKcT0Q87+G8YIk5rSrkSEWfgXv1cX43unM9ancvajsZ6d2Fox1ltEaBUelfN6LogfOpkIJ3P2Y7GekdimxPps2jEVYbSQP7eriq6X6MQTyWofeYRnQkpktOOisDv8RyrCiFj3OEhUzFUhf+stZVtwq7BYn5as9gkPMDJpbxN2kR6kJ8ZsNxhUcuFGuCzMTr3cKvG3CxOZT4WMwd7c5d4gFeFurEcUdayIbyoer9aiSBBnOK6UDZKmw23ckxwn+wC1FkXCfbTI7QRFpCJ047CQQ+Maja6X6BTS61yB76tYHyobJP8WuQ/fYi4u5XzzYiEcSeFr7Ii/72Nt2QUr5DNMEmb6nwL/HOHMc6BsoCIR7mCR8OEhpQOLc7YvYoFreleEyfhUcSoMEybsIG6UDZQ/MT7Hz5iOL3O+LiHHapW2OoOvihPxussLfIuEXe7HegYqeov8SXgh+f7/RtdkBmO98FQfqecPRSI8w3c4ru98VElpw3bvkJq1Pq8djqUvcl5I3brpr1+be/BRBB9FAK8AZlyDpfPPKRgAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left(1 - i\\right)^{i}$"
      ],
      "text/plain": [
       "       ⅈ\n",
       "(1 - ⅈ) "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sympy.simplify((1-i)**i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1-i)**i == 2**(i/2) * exp(1)**(pi/4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEMAAAAYCAYAAAChg0BHAAAABHNCSVQICAgIfAhkiAAAA5xJREFUWIXt2H2IFlUUx/HPukaCVFBGhRFJkRDhLvTH9t5WUBSVkYQFmYH5R0URlEmSsQSJGpFFiZRgQRFYkhK9klJZ0CsstkhkSPSPVmIv6Gpp2h/nDnt3duZ5dvfZhYj9wjDz3LlzzpnfPffcO09bT0+PCYJJLT7/PN4Yi0D+C7QqxqO4s9S2Fk/jEXyFP/Er3sJ5LfobDUU8OUtwFM/lja2K8Rv2lexdj03oxmpchCtxGB/ixBZ9joQ8noILsBDbqjqPltOFujOzti4cg09xDdahD99iHk7GxS34LNiefFcdj9XEAyfgVSwQAzmIXIyTcBfexA84gD+SoQWGCteJfuzI2mbjbZEFZY5LNvY2esthclM6X4fTMB0HxZRd2SCeF0SN21JlNH/BW/CiUPMLrMIGMc/XYj3asv4dItWOlJxvrHmBVejF5zX3R8IpIgu2YjeOxxQxcAdr4lmIs7G0zujk7Pp73CiUzF9wCb7EHNwsBCIyozfrdw7OxPsVfp7EZbgU/9QFMwI6sNNAvepM1ztr4pmJZcn/33VG88zYIir+kVKf3ViTrrtLAeVizMZm7C89/xTuwFVi+jViDt7FnhT0DjEY7aV+swwugJ2iNh2tiedCTEt9DqfjctyTro9lcGY04lA6F3NvKs4yVIyXSs89i7m4QhS9OtrxCm4Vgr2Ov3AtnhAjOz/rP0uIVtBp6OqQx7MRX5furxNiL5OyZThiTBYjC+9lwRCrBLFKdImRLViN20Wx24tTU/s+g5djeEYIsVzM6UL0Rfgo+V8hBJ0k6tiK7PkZon4UlOP5PR05+1NcfUXDcJbW5cn5OwbqQYeoMf3p9w1ig/Vz9tzdYgXZjF3Z8VDJfpdI101io5avRIfwctaPyMipBmdCLx4Wy3ldPE1plhn340F8J/YJBWsM1BGqV5E2w+O+1LcfPRX3i11rYW9Hhe25pd+NVrWC7nJDIzHuFem7XRS/RvuDz/BaE+d1XJ3OtzXp99MIbI4qnjoxHhD7+T4hxC9N7Kxscr+OKWJ+fyKq+1gxqniqasZiIUSvWAWaCdEKRbpPG0cfw6YsxlJRML8RGbFnnP0fEIXwXLGhq+ISQ/cZ40I+TebjcbFD3CqKZ5kfDd1LtMoisevdIL5qt4lBmo7zxYfWGWPss5JcjBnp3C5qRhUfG3sxPhCf+YtFFnSLD8RdQpz1Y+yvlraJv/0GaPXPnf8VE2JkTIiRMSFGxr/gLNV18Jg7gAAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle 2^{\\frac{i}{2}} e^{\\frac{\\pi}{4}}$"
      ],
      "text/plain": [
       " ⅈ  π\n",
       " ─  ─\n",
       " 2  4\n",
       "2 ⋅ℯ "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2**(i/2) * exp(1)**(pi/4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
